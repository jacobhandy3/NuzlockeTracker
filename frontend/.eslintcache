[{"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\App.tsx":"1","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\index.tsx":"3","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\SignUp.tsx":"4","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Profile.tsx":"5","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Login.tsx":"6","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\History.tsx":"7","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Game.tsx":"8","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Rules.tsx":"9","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\CreateGame.tsx":"10","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\axiosAPI.tsx":"11","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\refreshToken.tsx":"12","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\ProtectedRoute.tsx":"13"},{"size":3296,"mtime":1609779190892,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1607210213999,"results":"16","hashOfConfig":"15"},{"size":591,"mtime":1607546785510,"results":"17","hashOfConfig":"15"},{"size":3910,"mtime":1609712875817,"results":"18","hashOfConfig":"15"},{"size":4455,"mtime":1609778921487,"results":"19","hashOfConfig":"15"},{"size":3334,"mtime":1609712390029,"results":"20","hashOfConfig":"15"},{"size":7434,"mtime":1609719553964,"results":"21","hashOfConfig":"15"},{"size":15420,"mtime":1610396952908,"results":"22","hashOfConfig":"15"},{"size":11211,"mtime":1609883198519,"results":"23","hashOfConfig":"15"},{"size":5411,"mtime":1609718578890,"results":"24","hashOfConfig":"15"},{"size":346,"mtime":1608496545530,"results":"25","hashOfConfig":"15"},{"size":286,"mtime":1608652121289,"results":"26","hashOfConfig":"15"},{"size":798,"mtime":1609716955031,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"nhkrlw",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\App.tsx",["58"],"import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport {\n  ButtonGroup, Button,\n  Navbar, Nav, NavDropdown,\n} from 'react-bootstrap';\nimport { Switch, Route, } from 'react-router-dom';\nimport Rules from './components/Rules';\nimport Game from './components/Game';\nimport CreateGame from './components/CreateGame';\nimport History from './components/History';\nimport ProfileModal from './components/Profile';\nimport LoginModal from './components/Login';\nimport SignUpModal from './components/SignUp';\nimport ProtectedRoute from './ProtectedRoute';\n\n//interface for games to list in dropdown nav\ninterface IGame {\n  name: string,\n  region: string,\n  slug: string,\n}\n//initialize state for interfaces\nconst defaultGames:IGame[] = [];\n\n//main function for page\nfunction App(): JSX.Element {\n  const token = localStorage.getItem('access_token');\n  //states\n  const [games,setGames]: [IGame[], (games: IGame[]) => void] = React.useState(defaultGames)\n  const [loggedIn,setLoggedIn]: [boolean, (loggedIn:boolean) => void] = React.useState<boolean>(false);\n  const [error,setError]: [string, (error:string) => void] = React.useState(\"\");\n  \n  //effects\n  React.useEffect(() => {\n    if(localStorage.getItem('access_token')!=null && localStorage.getItem('refresh_token')!=null){\n      setLoggedIn(true);\n    }\n    else{ setLoggedIn(false);}\n  },[token])\n  //GET LIST OF GAMES FROM API\n  React.useEffect(() => {\n    axios\n        .get<IGame[]>(\"http://127.0.0.1:8000/api/game/\")\n        .then(response => { setGames(response.data);})\n  }, []);\n\n  const Greeting = () => {\n    switch(loggedIn){\n      case false:\n        return <ButtonGroup><LoginModal/><SignUpModal/></ButtonGroup>\n      case true:\n        return <ButtonGroup>\n          <ProfileModal/>\n          <Button onClick={()=>{localStorage.clear();window.location.reload();}}>Sign Out</Button>\n        </ButtonGroup>\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand>Nuzlocke Tracker</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Rules</Nav.Link>\n            <NavDropdown title=\"Games\" id=\"collasible-nav-dropdown\">\n              {games.map(g => {\n              return <NavDropdown.Item href={\"/game/\" + g.slug} key={g.slug}>{g.name}</NavDropdown.Item>})}\n            <NavDropdown.Item href={\"/create-game\"}>Create Your Own</NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link href=\"/history\">History</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n        <Greeting />\n      </Navbar>\n      <Switch>\n        {/*\"exact\" ensures path is exact match for what is loaded,\n        otherwise rules will always be displayed*/}\n        <Route exact={true} path=\"/\" component={Rules} primary={true}/>\n        <Route path=\"/game/:slug\" component={Game}/>\n        <Route path=\"/create-game\" component={CreateGame}/>\n        <ProtectedRoute isAuthenticated={(localStorage.getItem('access_token') !== null)}\n        isAllowed={true} restrictedPath=\"/history\" homePath=\"/\" component={History}/>\n      </Switch>\n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n}\n\nexport default App;",["59","60"],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\index.tsx",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\SignUp.tsx",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Profile.tsx",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Login.tsx",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\History.tsx",["61"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport axiosInstance from \"../axiosAPI\";\r\nimport axiosRefresh from \"../refreshToken\";\r\nimport {\r\n    Button, ButtonGroup,\r\n    Container, Row, Col,\r\n    Card,\r\n    Form,\r\n} from 'react-bootstrap';\r\nimport slugify from 'slugify';\r\n\r\n  interface IHistory {\r\n      game: number,\r\n      title: string,\r\n      body: string,\r\n      start_date: Date,\r\n      end_date: Date,\r\n      slug: string,\r\n  }\r\n  interface INewHistory {\r\n      title: string,\r\n      body: string\r\n  }\r\n\r\n  const defaultHistory:IHistory[] = [];\r\n  const defaultNewHistory:INewHistory = {title:\"\",body:\"\"}\r\n\r\n  function History(): JSX.Element {\r\n      //states\r\n      const [history,setHistory]: [IHistory[], (history: IHistory[]) => void] = React.useState(defaultHistory);\r\n      const [loading,setLoading]: [boolean, (loading:boolean) => void] = React.useState<boolean>(true);\r\n      const [newHistory,setNewHistory]: [INewHistory, (newHistory:INewHistory) => void] = React.useState(defaultNewHistory);\r\n      const [edit,setEdit]: [boolean, (show:boolean) => void] = React.useState<boolean>(false);\r\n\r\n    const handleEdit = () => setEdit(!edit);\r\n    const handleNewTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewHistory({\r\n            title:e.target.value,\r\n            body:newHistory.body\r\n        })\r\n    }\r\n    const handleNewBody = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewHistory({\r\n            title:newHistory.title,\r\n            body:e.target.value\r\n        })\r\n    }\r\n    const handlePatch = async (h:IHistory) => {\r\n        try {\r\n            const responsePatch = await axiosInstance.patch(('http://127.0.0.1:8000/api/history/' + h.slug + \"/\"), {\r\n                game: h.game,\r\n                title: newHistory.title,\r\n                body: newHistory.body,\r\n                start_date: h.start_date,\r\n                end_date: h.end_date,\r\n                slug: slugify(newHistory.title,{lower:true,strict:true}),\r\n            });\r\n            console.log(responsePatch);\r\n            window.location.reload();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    const handleDelete = async (h:IHistory) => {\r\n          const responseDelete = await axiosInstance.delete('http://127.0.0.1:8000/api/history/' + h.slug);\r\n          console.log(responseDelete);\r\n          window.location.reload();\r\n    }\r\n      //effects\r\n      //GET HISTORY LIST FROM API\r\n      React.useEffect(() => {\r\n          axios.get<IHistory[]>(\"http://127.0.0.1:8000/api/history/\", { headers: {\r\n            \"Content-Type\": \"applications/json\",\r\n            \"Accept\": \"application/json\",\r\n            \"Authorization\": \"Bearer \" + localStorage.getItem('access_token'),\r\n        }}).then(response => {\r\n                    setHistory(response.data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(async function (error) {\r\n                    if(error.response.status === 401 && localStorage.getItem('refresh_token') !== null) {\r\n                        try {\r\n                            const response = await axiosRefresh.post('', {\r\n                                refresh: localStorage.getItem('refresh_token')\r\n                            });\r\n                            localStorage.setItem('access_token',response.data.access);\r\n                        } catch (error) {\r\n                            throw(error);\r\n                        }\r\n                    }\r\n                });\r\n      }, []);\r\n      \r\n      return (\r\n          <div>\r\n                <Row className=\"row align-items-center\"><Col><h1>Your History</h1></Col></Row>\r\n                {history.map(h => {\r\n                    return (edit) ? <Container fluid>\r\n                        <br></br>\r\n                        <Card key={h.slug}>\r\n                            <Card.Body>\r\n                                <Form>\r\n                                    <Form.Group as={Row} >\r\n                                        <Form.Label column sm=\"2\">\r\n                                            Title\r\n                                        </Form.Label>\r\n                                        <Col sm=\"10\">\r\n                                            <Form.Control placeholder={h.title} value={newHistory.title} onChange={handleNewTitle}/>\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Row} >\r\n                                        <Form.Label column sm=\"2\">\r\n                                            Body\r\n                                        </Form.Label>\r\n                                        <Col lg>\r\n                                            <Form.Control as=\"textarea\" placeholder={h.body} value={newHistory.body} onChange={handleNewBody}/>\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </Card.Body>\r\n                            <Card.Footer className=\"text-muted\">\r\n                                <ButtonGroup>\r\n                                    <Button variant=\"success\" onClick={() => handlePatch(h)}>S</Button>\r\n                                    <Button variant=\"warning\" onClick={handleEdit}>C</Button>\r\n                                    <Button variant=\"danger\" onClick={() => handleDelete(h)}>X</Button>\r\n                                </ButtonGroup>\r\n                            </Card.Footer>\r\n                        </Card>\r\n                        <br></br>\r\n                    </Container>\r\n                    : <Container fluid>\r\n                        <br></br>\r\n                        <Card key={h.slug}>\r\n                            <Card.Header>\r\n                                <Row className=\"row align-items-center\">\r\n                                    <Col md={{ span: 8, offset: 2 }}>{h.title}</Col>\r\n                                    <Col md={{ span: 1, offset: 1 }}>\r\n                                        <ButtonGroup>\r\n                                            <Button variant=\"warning\" onClick={handleEdit}>U</Button>\r\n                                            <Button variant=\"danger\" onClick={() => handleDelete(h)}>X</Button>\r\n                                        </ButtonGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Header>\r\n                            <Card.Body><Card.Text>{h.body}</Card.Text></Card.Body>\r\n                            <Card.Footer className=\"text-muted\">\r\n                                <Row className=\"row align-items-center\">\r\n                                    <Col>{Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(new Date(h.start_date))}</Col>\r\n                                    <Col>{Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(new Date(h.end_date))}</Col>\r\n                                </Row>\r\n                            </Card.Footer>\r\n                        </Card>\r\n                        <br></br>\r\n                    </Container>\r\n                })}\r\n            </div>\r\n        )\r\n  }\r\n\r\n  export default History;","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Game.tsx",["62"],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\Rules.tsx",["63","64"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport comic from '../assets/Basic_Nuzlocke_rules.webp';\r\nimport axiosInstance from \"../axiosAPI\";\r\nimport axiosRefresh from \"../refreshToken\";\r\nimport {\r\n  Button, ButtonGroup,\r\n  Container, Row, Col,\r\n  CardColumns, Card,\r\n  Modal,\r\n  Form,\r\n} from 'react-bootstrap';\r\nimport slugify from 'slugify';\r\n\r\n//interface for rules sent by API\r\ninterface IRule {\r\n    title: string;\r\n    body: string;\r\n    slug: string,\r\n}\r\n//interface for creating new rules\r\ninterface newRule {\r\n    title: string;\r\n    body: string;\r\n}\r\n//initialize state for interfaces\r\nconst defaultRules:IRule[] = [];\r\n\r\nfunction Rules(): JSX.Element {\r\n    //states\r\n    const [rules,setRules]: [IRule[], (rules: IRule[]) => void] = React.useState(defaultRules);\r\n    const [customRule,setCustomRule]: [newRule,(customRule: newRule) => void] = React.useState({title:\"\",body:\"\"})\r\n    const [updateRule,setUpdateRule]: [newRule,(customRule: newRule) => void] = React.useState({title:\"\",body:\"\"})\r\n    const [loading,setLoading]: [boolean, (loading:boolean) => void] = React.useState<boolean>(true);\r\n    const [show, setShow]: [boolean, (show:boolean) => void] = React.useState<boolean>(false);\r\n    const [edit,setEdit]: [boolean, (show:boolean) => void] = React.useState<boolean>(false);\r\n\r\n    //handle Add Rule Modal show/close\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    //handle Edit Rule condition to make card with forms or not\r\n    const handleEdit = () => setEdit(!edit);\r\n\r\n    //handle submission of new rules\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const response = await axiosInstance.post('api/rules/', {\r\n                title: customRule.title,\r\n                body: customRule.body,\r\n                slug: slugify(customRule.title,{lower:true,strict:true}),\r\n            });\r\n            console.log(response);\r\n            window.location.reload();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    //handle changes of Form Controls for new rules\r\n    const handleChange_title = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCustomRule({\r\n            title:e.target.value,\r\n            body:customRule.body,\r\n        });\r\n    }\r\n    const handleChange_body = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCustomRule({\r\n            title:customRule.title,\r\n            body:e.target.value\r\n        });\r\n    }\r\n    //handle changes of Form Controls for new rules\r\n    const handleUpdate_title = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUpdateRule({\r\n            title:e.target.value,\r\n            body:updateRule.body,\r\n        });\r\n    }\r\n    const handleUpdate_body = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUpdateRule({\r\n            title:updateRule.title,\r\n            body:e.target.value\r\n        });\r\n    }\r\n    //handle deletion of user's custom rules\r\n    const handleDelete = async (slug:string) => {\r\n        const responseDelete = await axiosInstance.delete('api/rules/' + slug);\r\n        console.log(responseDelete);\r\n        window.location.reload();\r\n    }\r\n    //handle patch of user's custom rules\r\n    const handlePatch = async (slug:string) => {\r\n        try {\r\n            const responsePatch = await axiosInstance.patch(('api/rules/' + slug + \"/\"), {\r\n                title: updateRule.title,\r\n                body: updateRule.body,\r\n                slug: slugify(updateRule.title,{lower:true,strict:true}),\r\n            });\r\n            console.log(responsePatch);\r\n            window.location.reload();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    //effects\r\n    //required http headers for the API call\r\n    let auth:{[name:string]:string} = {\r\n        \"Content-Type\": \"applications/json\",\r\n        \"Accept\": \"application/json\",\r\n    }\r\n    //verify access token exists before making the GET request and add the 'Authorization' header\r\n    if(localStorage.getItem('access_token')!=null){auth.Authorization = \"Bearer \" + localStorage.getItem('access_token');}\r\n    //GET API call for rules\r\n    React.useEffect(() => {\r\n        axios\r\n            .get<IRule[]>(\"http://127.0.0.1:8000/api/rules/\", { headers: auth })\r\n            .then(response => {\r\n            setRules(response.data);\r\n            setLoading(false);\r\n            },\r\n            (error) => {\r\n                setLoading(true);\r\n            })\r\n            .catch(async function (error) {\r\n                //Check for Unauthorized API Calls(401) and use the refresh token, if it exists, to get a new access token\r\n                if(error.response.status === 401 && localStorage.getItem('refresh_token') !== null) {\r\n                    try {\r\n                        const response = await axiosRefresh.post('', {\r\n                            refresh: localStorage.getItem('refresh_token')\r\n                        });\r\n                        localStorage.setItem('access_token',response.data.access);\r\n                    } catch (error) {\r\n                        throw(error);\r\n                    }\r\n                }\r\n            });\r\n    },[]);\r\n\r\n    return(\r\n        <>\r\n        <header className=\"App-header\">\r\n            <h1>The Nuzlocke Challenge</h1>\r\n            <img src={comic} alt=\"comic\" />\r\n            <p>\r\n                A set of rules intended to create a higher level of difficulty while playing the Pokémon games.\r\n            </p>\r\n            <a className=\"App-link\"\r\n            href=\"http://www.nuzlocke.com/comics/pokemon-hard-mode/page/69/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                View the Comic\r\n            </a>\r\n        </header>\r\n        {/* Container to hold Rules title and button to find suggested rules for Nuzlocke Challenge */}\r\n        <Container fluid>\r\n            <Row className=\"row align-items-center\">\r\n                <Col md={{ span: 2, offset: 5 }}><h1>Rules</h1></Col>\r\n                <Col md={{ span: 2, offset: 3 }}>\r\n                    <Button href=\"https://bulbapedia.bulbagarden.net/wiki/Nuzlocke_Challenge\" variant=\"info\">\r\n                        Learn More\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n        <Container fluid>\r\n            {/* Display the card with rules as card columns */}\r\n            <CardColumns>\r\n                {/* loop through rules and display them in cards with conditional content */}\r\n                {rules.map((rule,index) => {\r\n                    // if the rule has a slug resembling the required rules then display the card with just its contents\r\n                    return (rule.slug.includes(\"rule-no-\")) ? <Card key={index}>\r\n                        <Card.Body>\r\n                            <Card.Title>{rule.title}</Card.Title>\r\n                            <Card.Text>{rule.body}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    //if edit is true make card with forms to update\r\n                    //and add button to save\r\n                    : (edit) ? <Card key={index}>\r\n                        <Card.Body>\r\n                            <Form>\r\n                                <Form.Group as={Row} controlId=\"formPlaintextNewTitle\">\r\n                                    <Form.Label column sm=\"2\">\r\n                                        Title\r\n                                    </Form.Label>\r\n                                    <Col sm=\"10\">\r\n                                        <Form.Control placeholder={rule.title} value={updateRule.title} onChange={handleUpdate_title}/>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row} controlId=\"formPlaintextNewBody\">\r\n                                    <Form.Label column sm=\"2\">\r\n                                        Body\r\n                                    </Form.Label>\r\n                                    <Col sm=\"10\">\r\n                                        <Form.Control as=\"textarea\" placeholder={rule.body} value={updateRule.body} onChange={handleUpdate_body}/>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Form>\r\n                            <ButtonGroup size=\"sm\">\r\n                                    <Button variant=\"success\" size =\"sm\" onClick={() => {handlePatch(rule.slug)}}>save</Button>\r\n                                    <Button variant=\"warning\" size=\"sm\" onClick={handleEdit}>cancel</Button>\r\n                                    <Button variant=\"danger\" size=\"sm\" onClick={() => handleDelete(rule.slug)}>delete</Button>\r\n                            </ButtonGroup>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    //otherwise just a regular card with update and delete buttons\r\n                    : <Card key={index}>\r\n                        <Card.Body>\r\n                            <Card.Title>{rule.title}</Card.Title>\r\n                            <Card.Text>{rule.body}</Card.Text>\r\n                            <ButtonGroup size=\"sm\">\r\n                                <Button variant=\"warning\" size=\"sm\" onClick={handleEdit}>update</Button>\r\n                                <Button variant=\"danger\" size=\"sm\" onClick={() => handleDelete(rule.slug)}>delete</Button>\r\n                            </ButtonGroup>\r\n                        </Card.Body>\r\n                    </Card>})}\r\n            </CardColumns>\r\n            <Button onClick={handleShow}>Add a Rule</Button>\r\n            {/* Modal with the Add Rule Form */}\r\n            <Modal show={show} onHide={handleClose} size=\"lg\" aria-labelledby=\"container-modal-title-vcenter\" centered>\r\n                <Modal.Header closeButton><h3>Add a Rule</h3></Modal.Header>\r\n                <Modal.Body>\r\n                <Form>\r\n                        <Form.Group as={Row} >\r\n                            <Form.Label column md={{ span: 1, offset: 0 }}>\r\n                                <h5>Title</h5>\r\n                            </Form.Label>\r\n                            <Col md={{ span: 11, offset: 0 }}>\r\n                                <Form.Control value={customRule.title} onChange={handleChange_title} placeholder=\"Name of the Rule\"/>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} >\r\n                            <Form.Label column md={{ span: 1, offset: 0 }}>\r\n                                <h5>Body</h5>\r\n                            </Form.Label>\r\n                            <Col md={{ span: 11, offset: 0 }}>\r\n                                <Form.Control as=\"textarea\" value={customRule.body} onChange={handleChange_body} placeholder=\"Rule Description\"/>\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer style={{margin: \"0 auto\",}}><Button onClick={handleSubmit}>Submit</Button></Modal.Footer>\r\n            </Modal>\r\n        </Container>\r\n        <br></br>\r\n        </>\r\n    )}\r\n\r\nexport default Rules;","C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\components\\CreateGame.tsx",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\axiosAPI.tsx",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\refreshToken.tsx",[],"C:\\Users\\jakem\\Documents\\GitHub\\NuzlockeTracker\\frontend\\src\\ProtectedRoute.tsx",[],{"ruleId":"65","severity":1,"message":"66","line":33,"column":16,"nodeType":"67","messageId":"68","endLine":33,"endColumn":24},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"65","severity":1,"message":"73","line":32,"column":14,"nodeType":"67","messageId":"68","endLine":32,"endColumn":21},{"ruleId":"65","severity":1,"message":"74","line":13,"column":10,"nodeType":"67","messageId":"68","endLine":13,"endColumn":23},{"ruleId":"65","severity":1,"message":"73","line":34,"column":12,"nodeType":"67","messageId":"68","endLine":34,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":137,"column":7,"nodeType":"77","endLine":137,"endColumn":9,"suggestions":"78"},"@typescript-eslint/no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'loading' is assigned a value but never used.","'MdCheckCircle' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [auth]",{"range":"84","text":"85"},[5180,5182],"[auth]"]